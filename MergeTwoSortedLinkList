# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        if list1 == None and list2 == None:
            return list1
        if list1 == None:
            return list2
        if list2 == None:
            return list1
        
        head=None
        mer = None
        while list1 != None and list2 != None:
            if list1.val <= list2.val:
                if mer==None:
                    mer = ListNode(list1.val)
                    head=mer
                    list1=list1.next
                    continue
                mer.next = ListNode(list1.val)
                list1=list1.next
            else:
                if mer==None:
                    mer = ListNode(list2.val)
                    head=mer
                    list2=list2.next
                    continue
                mer.next = ListNode(list2.val)
                list2=list2.next
            mer=mer.next
                
        if list1==None and list2!=None:
            while list2!=None:
                mer.next = ListNode(list2.val)
                list2=list2.next
                mer=mer.next
                
        if list2==None and list1!=None:
            while list1!=None:
                mer.next = ListNode(list1.val)
                list1=list1.next
                mer=mer.next
                
        return head
